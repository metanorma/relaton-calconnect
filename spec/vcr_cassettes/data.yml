---
http_interactions:
- request:
    method: get
    uri: http://127.0.0.1:4000/relaton/index.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: 'OK '
    headers:
      Etag:
      - 20300ddab-27d92-5db97af9
      Content-Type:
      - text/yaml; charset=utf-8
      Content-Length:
      - '163218'
      Last-Modified:
      - Wed, 30 Oct 2019 11:58:49 GMT
      Cache-Control:
      - private, max-age=0, proxy-revalidate, no-store, no-cache, must-revalidate
      Server:
      - WEBrick/1.3.1 (Ruby/2.4.0/2016-12-24)
      Date:
      - Wed, 30 Oct 2019 12:07:27 GMT
      Connection:
      - Keep-Alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ---
root:
  title: CalConnect Document Registry
  author: CalConnect
  items:
  - id: CC/IETF70012-2013
    title:
    - type: title-main
      content: Objectclass Property for vCard
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Objectclass Property for vCard
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-vcard-objectclass/
    - type: rxl
      content: relaton/xml/cc-ietf-70012-2013.rxl
    type: standard
    docid:
      id: CC/IETF 70012:2013
      type: CC
    date:
      type: published
      value: '2013-01-24'
    revdate: '2013-01-24'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0614-2006
    title:
    - type: title-main
      content: Report on Roundtable VI (CD 0614)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable VI (CD 0614)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable6rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0614-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0614:2006
      type: CC
    date:
      type: published
      value: '2006-05-23'
    revdate: '2006-05-23'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0601-2006
    title:
    - type: title-main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases V1.1 (CD 0601)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases V1.1 (CD 0601)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0601%20Min-IOP%20Use%20Cases%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-s-0601-2006.rxl
    type: specification
    docid:
      id: CC/S 0601:2006
      type: CC
    date:
      type: published
      value: '2006-01-24'
    revdate: '2006-01-24'
    abstract:
      content: This document was created by the Use Case Technical Committee of the
        Calendaring and Scheduling Consortium. The document defines the use cases
        for minimum interoperability of calendaring and scheduling. Minimum interoperability
        is the basic level of functionality our collective experience tells us is
        necessary to have a useful system. We realize that in some cases it may be
        more than is currently offered by 'basic' calendaring and scheduling applications.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70022-2016
    title:
    - type: title-main
      content: The Time Zone Data Distribution Service (TZDIST) Geolocate Extension
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: The Time Zone Data Distribution Service (TZDIST) Geolocate Extension
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-murchison-tzdist-geolocate/
    - type: rxl
      content: relaton/xml/cc-ietf-70022-2016.rxl
    type: standard
    docid:
      id: CC/IETF 70022:2016
      type: CC
    date:
      type: published
      value: '2016-10-14'
    revdate: '2016-10-14'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/A1802-2018
    title:
      content: Report on CalConnect Test Event and Developers Forum XLI, January 29-31,
        2018
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-41.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-41.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-41.doc
    - type: html
      content: csd/csd-report-ioptestevent-41.html
    - type: rxl
      content: relaton/xml/cc-a-1802-2018.rxl
    type: administrative
    docid:
      id: CC/A 1802:2018
      type: CC
    docnumber: '1802'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-03-02T00:00:00Z'
    revdate: '2018-03-02T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/IETF70016-2014
    title:
    - type: title-main
      content: WebDAV Resource Sharing
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: WebDAV Resource Sharing
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-pot-webdav-resource-sharing/
    - type: rxl
      content: relaton/xml/cc-ietf-70016-2014.rxl
    type: standard
    docid:
      id: CC/IETF 70016:2014
      type: CC
    date:
      type: published
      value: '2014-12-15'
    revdate: '2014-12-15'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/A1803-2018
    title:
      content: Report on CalConnect Conference XLII, June 4 - June 8, 2018
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-42.xml
    - type: pdf
      content: csd/csd-report-conference-42.pdf
    - type: doc
      content: csd/csd-report-conference-42.doc
    - type: html
      content: csd/csd-report-conference-42.html
    - type: rxl
      content: relaton/xml/cc-a-1803-2018.rxl
    type: administrative
    docid:
      id: CC/A 1803:2018
      type: CC
    docnumber: '1803'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-06-25T00:00:00Z'
    revdate: '2018-06-25T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/IETF7809-2013
    title:
    - type: title-main
      content: 'CalDAV: Timezones by Reference (IETF RFC 7809)'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'CalDAV: Timezones by Reference (IETF RFC 7809)'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7809
    - type: rxl
      content: relaton/xml/cc-ietf-7809-2013.rxl
    type: standard
    docid:
      id: CC/IETF 7809:2013
      type: CC
    date:
      type: published
      value: '2013-08-26'
    revdate: '2013-08-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70017-2015
    title:
    - type: title-main
      content: Task Extensions to iCalendar
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Task Extensions to iCalendar
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-apthorp-ical-tasks/
    - type: rxl
      content: relaton/xml/cc-ietf-70017-2015.rxl
    type: standard
    docid:
      id: CC/IETF 70017:2015
      type: CC
    date:
      type: published
      value: '2015-01-04'
    revdate: '2015-01-04'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/A1701-2017
    title:
      content: Report on CalConnect Conference XXXVIII, February 15-17, 2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-38.xml
    - type: pdf
      content: csd/csd-report-conference-38.pdf
    - type: doc
      content: csd/csd-report-conference-38.doc
    - type: html
      content: csd/csd-report-conference-38.html
    - type: rxl
      content: relaton/xml/cc-a-1701-2017.rxl
    type: administrative
    docid:
      id: CC/A 1701:2017
      type: CC
    docnumber: '1701'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-03-08T00:00:00Z'
    revdate: '2017-03-08T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/IETF70023-2017
    title:
    - type: title-main
      content: Calendar subscription upgrades
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Calendar subscription upgrades
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-subscription-upgrade/
    - type: rxl
      content: relaton/xml/cc-ietf-70023-2017.rxl
    type: standard
    docid:
      id: CC/IETF 70023:2017
      type: CC
    date:
      type: published
      value: '2017-02-13'
    revdate: '2017-02-13'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm1203-2012
    title:
    - type: title-main
      content: Report on Roundtable XXIV (CD 1203)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXIV (CD 1203)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable24rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1203-2012.rxl
    type: administrative
    docid:
      id: CC/Adm 1203:2012
      type: CC
    date:
      type: published
      value: '2012-06-01'
    revdate: '2012-06-01'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0903-2009
    title:
    - type: title-main
      content: Freebusy Read URL V1.0 (CD 0903)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Freebusy Read URL V1.0 (CD 0903)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0903%20Freebusy%20Read%20URL%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0903-2009.rxl
    type: specification
    docid:
      id: CC/S 0903:2009
      type: CC
    date:
      type: published
      value: '2009-04-15'
    revdate: '2009-04-15'
    abstract:
      content: This document, developed by the Freebusy Technical Committee, defines
        a standardized form of Freebusy read URL to improve interoperability between
        client and server implementations, while extending the functionality and utility
        through the use of optional parameters.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0506-2005
    title:
    - type: title-main
      content: September 2005 CalConnect Interoperability Test Report V1.0 (CD 0506)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: September 2005 CalConnect Interoperability Test Report V1.0 (CD 0506)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0506%20September%202005%20CalConnect%20Interoperability%20Test%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0506-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0506:2005
      type: CC
    date:
      type: published
      value: '2005-09-14'
    revdate: '2005-09-14'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/CD51003-2018
    title:
      content: Calendaring and scheduling — Support for Series in iCalendar
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-51003.xml
    - type: pdf
      content: csd/cc-51003.pdf
    - type: doc
      content: csd/cc-51003.doc
    - type: html
      content: csd/cc-51003.html
    - type: rxl
      content: relaton/xml/cc-cd-51003-2018.rxl
    type: standard
    docid:
      id: CC/CD 51003:2018
      type: CC
    docnumber: '51003'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - person:
        name:
          completename: Michael Douglass
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-11-30'
    revdate: '2018-11-30'
    language: en
    script: Latn
    docstatus:
      stage: committee-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CALENDAR
  - id: CC/A1603-2016
    title:
      content: Report on CalConnect Conference XXXVI, April 21-22, 2016
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-36.xml
    - type: pdf
      content: csd/csd-report-conference-36.pdf
    - type: doc
      content: csd/csd-report-conference-36.doc
    - type: html
      content: csd/csd-report-conference-36.html
    - type: rxl
      content: relaton/xml/cc-a-1603-2016.rxl
    type: administrative
    docid:
      id: CC/A 1603:2016
      type: CC
    docnumber: '1603'
    date:
      type: published
      value: '2016-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2016-05-11T00:00:00Z'
    revdate: '2016-05-11T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2016'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/A1602-2016
    title:
      content: Report on CalConnect Interoperability Test Event XXXV, January 11-13,
        2016
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-35.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-35.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-35.doc
    - type: html
      content: csd/csd-report-ioptestevent-35.html
    - type: rxl
      content: relaton/xml/cc-a-1602-2016.rxl
    type: administrative
    docid:
      id: CC/A 1602:2016
      type: CC
    docnumber: '1602'
    date:
      type: published
      value: '2016-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2016-02-17T00:00:00Z'
    revdate: '2016-02-17T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2016'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/FDS18011-2018
    title:
      content: Date and time — Explicit representation
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-18011.xml
    - type: pdf
      content: csd/cc-18011.pdf
    - type: doc
      content: csd/cc-18011.doc
    - type: html
      content: csd/cc-18011.html
    - type: rxl
      content: relaton/xml/cc-fds-18011-2018.rxl
    type: standard
    docid:
      id: CC/FDS 18011:2018
      type: CC
    docnumber: '18011'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-02-10T00:00:00Z'
    revdate: '2018-02-10T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: final-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: DATETIME
  - id: CC/S0601-2005
    title:
    - type: title-main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases V1.0 (CD 0601)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases V1.0 (CD 0601)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0601%20Min-IOP%20Use%20Cases%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0601-2005.rxl
    type: specification
    docid:
      id: CC/S 0601:2005
      type: CC
    date:
      type: published
      value: '2005-11-30'
    revdate: '2005-11-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1601-2016
    title:
    - type: title-main
      content: Report on CalConnect Conference XXXV (CD 1601)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXXV (CD 1601)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference35rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1601-2016.rxl
    type: administrative
    docid:
      id: CC/Adm 1601:2016
      type: CC
    date:
      type: published
      value: '2016-02-03'
    revdate: '2016-02-03'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0404-2004
    title:
    - type: title-main
      content: Report on Roundtable I (CD 0404)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable I (CD 0404)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable1rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0404-2004.rxl
    type: administrative
    docid:
      id: CC/Adm 0404:2004
      type: CC
    date:
      type: published
      value: '2004-09-25'
    revdate: '2004-09-25'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/NP56001
    title:
    - type: title-intro
      content: Directory
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Standardized profile
      language: en
      script: Latn
      format: text/plain
    - type: title-part
      content: Personal and organizational information
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Directory – Standardized profile – Personal and organizational information
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-56001.rxl
    type: standard
    docid:
      id: CC/ISO/NP 56001
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/IETF7808-2010
    title:
    - type: title-main
      content: Time Zone Data Distribution Service
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Time Zone Data Distribution Service
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7808
    - type: rxl
      content: relaton/xml/cc-ietf-7808-2010.rxl
    type: standard
    docid:
      id: CC/IETF 7808:2010
      type: CC
    date:
      type: published
      value: '2016-03-01'
    revdate: '2016-03-01'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1013-2010
    title:
    - type: title-main
      content: Report on Roundtable XIX (CD 1013)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XIX (CD 1013)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable19rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1013-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1013:2010
      type: CC
    date:
      type: published
      value: '2010-10-20'
    revdate: '2010-10-20'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1901-2019
    title:
      content: Report on CalConnect Conference XLIV, February 5 - February 8, 2019
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-44.xml
    - type: pdf
      content: csd/csd-report-conference-44.pdf
    - type: doc
      content: csd/csd-report-conference-44.doc
    - type: html
      content: csd/csd-report-conference-44.html
    - type: rxl
      content: relaton/xml/cc-a-1901-2019.rxl
    type: administrative
    docid:
      id: CC/A 1901:2019
      type: CC
    docnumber: '1901'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-03-07T00:00:00Z'
    revdate: '2019-03-07T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/IETF/DS34010
    title:
    - type: title-main
      content: The Time Zone Information Format (TZif)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: The Time Zone Information Format (TZif)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-murchison-tzdist-tzif/
    - type: rxl
      content: relaton/xml/cc-ietf-ds-34010.rxl
    type: standard
    docid:
      id: CC/IETF/DS 34010
      type: CC
    date:
      type: published
      value: '2017-11-26'
    revdate: '2017-11-26'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0809-2008
    title:
    - type: title-main
      content: Report on Roundtable XI (CD 0809)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XI (CD 0809)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable11rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0809-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0809:2008
      type: CC
    date:
      type: published
      value: '2008-02-08'
    revdate: '2008-02-08'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1406-2014
    title:
    - type: title-main
      content: Report on CalConnect Conference XXXI (CD 1406)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXXI (CD 1406)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference31rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1406-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1406:2014
      type: CC
    date:
      type: published
      value: '2014-10-16'
    revdate: '2014-10-16'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1407-2014
    title:
    - type: title-main
      content: Report on Interoperability Test Event at CalConnect XXXI (CD 1407)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event at CalConnect XXXI (CD 1407)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent31rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1407-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1407:2014
      type: CC
    date:
      type: published
      value: '2014-10-31'
    revdate: '2014-10-31'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0603-2006
    title:
    - type: title-main
      content: January 2006 CalConnect Interoperability Test Report V1.0 (CD 0603)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: January 2006 CalConnect Interoperability Test Report V1.0 (CD 0603)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0603%20January%202006%20CalConnect%20Interoperability%20Test%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0603-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0603:2006
      type: CC
    date:
      type: published
      value: '2006-02-09'
    revdate: '2006-02-09'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1106-2011
    title:
    - type: title-main
      content: Report on Roundtable XXII (CD 1106)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXII (CD 1106)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable22rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1106-2011.rxl
    type: administrative
    docid:
      id: CC/Adm 1106:2011
      type: CC
    date:
      type: published
      value: '2011-11-07'
    revdate: '2011-11-07'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0505-2005
    title:
    - type: title-main
      content: Results from Recurrence Questionnaire (CD 0505)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Results from Recurrence Questionnaire (CD 0505)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0505%20Results%20from%20First%20Recurrence%20Questionnaire.pdf
    - type: rxl
      content: relaton/xml/cc-s-0505-2005.rxl
    type: specification
    docid:
      id: CC/S 0505:2005
      type: CC
    date:
      type: published
      value: '2005-09-26'
    revdate: '2005-09-26'
    abstract:
      content: The Recurrence Technical Committee of The Calendaring and Scheduling
        Consortium has collected specific information on how Calendaring and Scheduling
        implementations have, or have not, implemented the Recurrence Rules of RFCs
        2445 and 2446, iCalendar and iTIP. This document is part of the committee's
        work to compile actual usage information and interoperability issues. The
        Recurrence Committee recently collected information in the form of a Recurrence
        Questionnaire, which allowed vendors and other producers and consumers of
        iCalendar recurrences to list the features of iCalendar that they implemented.
        The questionnaire also contained space for comments about each line item in
        the RFCs and also overall issues with recurrences. The Recurrence Technical
        Committee has since analyzed the results of the questionnaire into this document.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0510-2005
    title:
    - type: title-main
      content: Report on TIMEZONE Questionnaire Results V1.0 (CD 0510)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on TIMEZONE Questionnaire Results V1.0 (CD 0510)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0510%20Report%20on%20TIMEZONE%20Questionnaire%20Results%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0510-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0510:2005
      type: CC
    date:
      type: published
      value: '2005-10-03'
    revdate: '2005-10-03'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0511-2005
    title:
    - type: title-main
      content: Report on Roundtable II (CD 0511)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable II (CD 0511)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable2rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0511-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0511:2005
      type: CC
    date:
      type: published
      value: '2005-01-13'
    revdate: '2005-01-13'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0901-2009
    title:
    - type: title-main
      content: Report on Roundtable XIV (CD 0901)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XIV (CD 0901)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable14rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0901-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0901:2009
      type: CC
    date:
      type: published
      value: '2009-02-06'
    revdate: '2009-02-06'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R1104-2018
    title:
    - type: title-main
      content: Index to Calendaring and Scheduling Standards (CD 1104)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Index to Calendaring and Scheduling Standards (CD 1104)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://www.calconnect.org/resources/calendaring-standards
    - type: rxl
      content: relaton/xml/cc-r-1104-2018.rxl
    type: report
    docid:
      id: CC/R 1104:2018
      type: CC
    date:
      type: published
      value: '2018-06-22'
    revdate: '2018-06-22'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0808-2009
    title:
    - type: title-main
      content: November 2008 CalConnect Mobile Interoperability Test Report V2.0 (CD
        0808)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: November 2008 CalConnect Mobile Interoperability Test Report V2.0 (CD
        0808)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0808%20November%202008%20CalConnect%20Mobile%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0808-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0808:2009
      type: CC
    date:
      type: published
      value: '2009-02-19'
    revdate: '2009-02-19'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0706-2008
    title:
    - type: title-main
      content: Mobile Calendar Interoperability Test Suite V1.1 (CD 0706)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Mobile Calendar Interoperability Test Suite V1.1 (CD 0706)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0706%20Mobile%20Calendar%20Interoperability%20Test%20Suite%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-s-0706-2008.rxl
    type: specification
    docid:
      id: CC/S 0706:2008
      type: CC
    date:
      type: published
      value: '2008-08-24'
    revdate: '2008-08-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/DIR10002-2019
    title:
      content: 'CalConnect Directive: Standard document requirements'
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10002.xml
    - type: pdf
      content: csd/cc-10002.pdf
    - type: doc
      content: csd/cc-10002.doc
    - type: html
      content: csd/cc-10002.html
    - type: rxl
      content: relaton/xml/cc-dir-10002-2019.rxl
    type: directive
    docid:
      id: CC/DIR 10002:2019
      type: CC
    docnumber: '10002'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-01-18'
    revdate: '2019-01-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/DIR10003-2019
    title:
      content: 'CalConnect Directive: Patent policy'
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10003.xml
    - type: pdf
      content: csd/cc-10003.pdf
    - type: doc
      content: csd/cc-10003.doc
    - type: html
      content: csd/cc-10003.html
    - type: rxl
      content: relaton/xml/cc-dir-10003-2019.rxl
    type: directive
    docid:
      id: CC/DIR 10003:2019
      type: CC
    docnumber: '10003'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-01-18'
    revdate: '2019-01-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/Adv0707-2007
    title:
      content: CalConnect EDST (Extended Daylight Savings Time) Reflections and Recommendations
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-0707.xml
    - type: pdf
      content: csd/cc-0707.pdf
    - type: doc
      content: csd/cc-0707.doc
    - type: html
      content: csd/cc-0707.html
    - type: rxl
      content: relaton/xml/cc-adv-0707-2007.rxl
    type: advisory
    docid:
      id: CC/Adv 0707:2007
      type: CC
    docnumber: '0707'
    date:
      type: published
      value: '2007-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2007-10-04T00:00:00Z'
    revdate: '2007-10-04T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2007'
    editorialgroup:
      technical_committee:
        name: Ad Hoc DST
  - id: CC/IETF7265-2013
    title:
    - type: title-main
      content: 'jCal: The JSON format for iCalendar (IETF RFC 7265)'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'jCal: The JSON format for iCalendar (IETF RFC 7265)'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7265
    - type: rxl
      content: relaton/xml/cc-ietf-7265-2013.rxl
    type: standard
    docid:
      id: CC/IETF 7265:2013
      type: CC
    date:
      type: published
      value: '2013-03-26'
    revdate: '2013-03-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R0907-2009
    title:
    - type: title-main
      content: A Recommendation for Minimum Interoperability of Resource Information
        V1.0 (CD 0907)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: A Recommendation for Minimum Interoperability of Resource Information
        V1.0 (CD 0907)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0907%20A%20Recommendation%20for%20Minimum%20Interoperability%20of%20Resource%20Information%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-r-0907-2009.rxl
    type: report
    docid:
      id: CC/R 0907:2009
      type: CC
    date:
      type: published
      value: '2009-06-10'
    revdate: '2009-06-10'
    abstract:
      content: This document was created by the USECASE Technical Committee of the
        Calendaring and Scheduling Consortium. The document presents a recommendation
        for enhancing inter-operability of resources within the calendaring and scheduling
        application domain. Minimum interoperability is the basic level of functionality
        our collective experience tells us is necessary to have a useful system. The
        thrust of this effort is to enable resource inter-operability such that, when
        a described event contains resources, the recipient of that event is able
        to make practical use of the described resources; ideally the recipient should
        be so enabled regardless of whether the recipient is within the same calendaring
        domain. The resulting recommendations rely in part upon adoption of standards
        revisions that are in draft as of this writing.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0608-2006
    title:
    - type: title-main
      content: The Open Group Federated Freebusy Challenge Demo V1.0 (CD 0608)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: The Open Group Federated Freebusy Challenge Demo V1.0 (CD 0608)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0608%20The%20Open%20Group%20Federated%20Freebusy%20Challenge%20Demo%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0608-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0608:2006
      type: CC
    date:
      type: published
      value: '2006-07-17'
    revdate: '2006-07-17'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0609-2006
    title:
    - type: title-main
      content: Report on Mobile Calendaring Questionnaire V2 Results V1.0 (CD 0609)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Mobile Calendaring Questionnaire V2 Results V1.0 (CD 0609)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0609%20Report%20on%20Mobile%20Calendaring%20Questionnaire%20V2%20Results%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0609-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0609:2006
      type: CC
    date:
      type: published
      value: '2006-07-24'
    revdate: '2006-07-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0803-2008
    title:
    - type: title-main
      content: February 2008 CalConnect Mobile Interoperability Test Report V2.0 (CD
        0803)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: February 2008 CalConnect Mobile Interoperability Test Report V2.0 (CD
        0803)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0803%20February%202008%20CalConnect%20Mobile%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0803-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0803:2008
      type: CC
    date:
      type: published
      value: '2008-04-09'
    revdate: '2008-04-09'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/WD19160-6
    title:
    - type: title-intro
      content: Addressing
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Digital interchange models
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Addressing – Digital interchange models
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-wd-19160-6.rxl
    type: standard
    docid:
      id: CC/ISO/WD 19160-6
      type: CC
    date:
      type: published
      value: '2018-10-04'
    revdate: '2018-10-04'
    docstatus:
      stage: working-draft
    fetched: '2019-09-25'
  - id: CC/Adm0802-2008
    title:
    - type: title-main
      content: February 2008 CalConnect Interoperability Test Report V2.0 (CD 0802)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: February 2008 CalConnect Interoperability Test Report V2.0 (CD 0802)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0802%20February%202008%20CalConnect%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0802-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0802:2008
      type: CC
    date:
      type: published
      value: '2008-04-09'
    revdate: '2008-04-09'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1505-2015
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXXIV (CD 1505)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXXIV (CD 1505)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent34rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1505-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1505:2015
      type: CC
    date:
      type: published
      value: '2015-06-19'
    revdate: '2015-06-19'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1504-2015
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXXIII (CD 1504)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXXIII (CD 1504)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent33rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1504-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1504:2015
      type: CC
    date:
      type: published
      value: '2015-06-23'
    revdate: '2015-06-23'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70026-2018
    title:
    - type: title-main
      content: 'JSCalendar: A JSON representation of calendar data'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'JSCalendar: A JSON representation of calendar data'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-ietf-calext-jscalendar/
    - type: rxl
      content: relaton/xml/cc-ietf-70026-2018.rxl
    type: standard
    docid:
      id: CC/IETF 70026:2018
      type: CC
    date:
      type: published
      value: '2018-11-05'
    revdate: '2018-11-05'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/R0604-2006
    title:
    - type: title-main
      content: iCalendar Recurrence Problems and Recommendations V1.0 (CD 0604)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: iCalendar Recurrence Problems and Recommendations V1.0 (CD 0604)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0604%20iCalendar%20Recurrence%20Problems%20and%20Recommendations%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-r-0604-2006.rxl
    type: report
    docid:
      id: CC/R 0604:2006
      type: CC
    date:
      type: published
      value: '2006-03-16'
    revdate: '2006-03-16'
    abstract:
      content: This document contains information about recurrence implementation
        issues and recommendations on how to resolve these issues. We first explain
        what recurrences are, justify the need for recurrences, identify recurrence
        implementation problems and ambiguities, and then offer some guidelines and
        recommendations to solve these issues.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC0703-2007
    title:
    - type: title-main
      content: CalDAV Scheduling Requirements V1.1 (CD 0703)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalDAV Scheduling Requirements V1.1 (CD 0703)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0703%20CalDAV%20Scheduling%20Requirements%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-0703-2007.rxl
    type: standard
    docid:
      id: CC 0703:2007
      type: CC
    date:
      type: published
      value: '2007-07-11'
    revdate: '2007-07-11'
    abstract:
      content: This document was created by the CalDAV Technical Committee of the
        Calendaring and Scheduling Consortium. It presents a list of features in the
        form of requirements for the scheduling extensions to CalDAV [RFC 4791], that
        is, the extensions to the Web Distributed Authoring and Versioning (WebDAV)
        [RFC 2518] protocol to specify a standard way of exchanging and processing
        scheduling messages based on the iCalendar Transport-Independent Interoperability
        Protocol (iTIP) [RFC 2446].
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1005-2010
    title:
    - type: title-main
      content: Report on Roundtable XVIII (CD 1005)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XVIII (CD 1005)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable18rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1005-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1005:2010
      type: CC
    date:
      type: published
      value: '2010-06-02'
    revdate: '2010-06-02'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adv18018-2018
    title:
      content: 'CalConnect calls on EU to reconsider timeline for proposed seasonal
        time changes: Workshop and mailing list announced to discuss technical impact
        of planned changes'
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-18018.xml
    - type: pdf
      content: csd/cc-18018.pdf
    - type: doc
      content: csd/cc-18018.doc
    - type: html
      content: csd/cc-18018.html
    - type: rxl
      content: relaton/xml/cc-adv-18018-2018.rxl
    type: advisory
    docid:
      id: CC/Adv 18018:2018
      type: CC
    docnumber: '18018'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-10-30'
    revdate: '2018-10-30'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: Ad Hoc EU Time
  - id: CC/Adm1401-2014
    title:
    - type: title-main
      content: Report on Roundtable XXIX (CD 1401)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXIX (CD 1401)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable29rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1401-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1401:2014
      type: CC
    date:
      type: published
      value: '2014-02-26'
    revdate: '2014-02-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0605-2006
    title:
    - type: title-main
      content: OMA DS Briefing April 2006 V1.0 (CD 0605)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: OMA DS Briefing April 2006 V1.0 (CD 0605)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0605%20OMA%20DS%20Briefing%20April%202006%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0605-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0605:2006
      type: CC
    date:
      type: published
      value: '2006-04-05'
    revdate: '2006-04-05'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC0606-2006
    title:
    - type: title-main
      content: Timezone Registry and Service Recommendations V1.0 (CD 0606)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Timezone Registry and Service Recommendations V1.0 (CD 0606)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0606%20Timezone%20Registry%20and%20Service%20Recommendations%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-0606-2006.rxl
    type: standard
    docid:
      id: CC 0606:2006
      type: CC
    date:
      type: published
      value: '2006-04-17'
    revdate: '2006-04-17'
    abstract:
      content: This document contains technical recommendations on implementing a
        time zone registry and a time zone service. Standardized time zones are needed
        for improved interoperability to avoid some common problems, and to allow
        using time zones by reference rather than value.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70010-2012
    title:
    - type: title-main
      content: Use of the Prefer Header Field in Web Distributed Authoring and Versioning
        (WebDAV)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Use of the Prefer Header Field in Web Distributed Authoring and Versioning
        (WebDAV)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-murchison-webdav-prefer/
    - type: rxl
      content: relaton/xml/cc-ietf-70010-2012.rxl
    type: standard
    docid:
      id: CC/IETF 70010:2012
      type: CC
    date:
      type: published
      value: '2012-09-27'
    revdate: '2012-09-27'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm1009-2010
    title:
    - type: title-main
      content: May 2010 CalConnect Interoperability Test Event Report V1.0 (CD 1009)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: May 2010 CalConnect Interoperability Test Event Report V1.0 (CD 1009)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1009%20May%202010%20CalConnect%20Interoperability%20Test%20Event%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1009-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1009:2010
      type: CC
    date:
      type: published
      value: '2010-07-19'
    revdate: '2010-07-19'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70011-2013
    title:
    - type: title-main
      content: 'VPOLL: Consensus Scheduling Component for iCalendar'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'VPOLL: Consensus Scheduling Component for iCalendar'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-york-vpoll/
    - type: rxl
      content: relaton/xml/cc-ietf-70011-2013.rxl
    type: standard
    docid:
      id: CC/IETF 70011:2013
      type: CC
    date:
      type: published
      value: '2013-01-22'
    revdate: '2013-01-22'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/R0609-2006
    title:
    - type: title-main
      content: Mobile Calendaring Questionnaire V2 Results (CD 0609)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Mobile Calendaring Questionnaire V2 Results (CD 0609)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0609%20Report%20on%20Mobile%20Calendaring%20Questionnaire%20V2%20Results.pdf
    - type: rxl
      content: relaton/xml/cc-r-0609-2006.rxl
    type: report
    docid:
      id: CC/R 0609:2006
      type: CC
    date:
      type: published
      value: '2006-06-24'
    revdate: '2006-06-24'
    abstract:
      content: The goal of this questionnaire was to determine how and to what extent
        Calendaring is being used on mobile devices, with a view to using those results
        to aid in the development of recommendations on how to address any problem
        areas. A number of responses were received to the online questionnaire, and
        a summary and brief conclusion of these results is presented, along with the
        raw results themselves. Respondents to the questionnaire answered based on
        the capabilities of their device. The results show an aggregate of these results.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R0510-2005
    title:
    - type: title-main
      content: Report on Timezone Questionnaire Results (CD 0510)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Timezone Questionnaire Results (CD 0510)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0510%20Report%20on%20TIMEZONE%20Questionnaire%20Results.pdf
    - type: rxl
      content: relaton/xml/cc-r-0510-2005.rxl
    type: report
    docid:
      id: CC/R 0510:2005
      type: CC
    date:
      type: published
      value: '2005-10-03'
    revdate: '2005-10-03'
    abstract:
      content: This document is one in a series of documents summarizing the results
        of questionnaires that the Calendaring and Scheduling Consortium has conducted
        to help better understand the requirements, problems and needs for calendaring
        and scheduling solutions. It is expected that the results of these questionnaires
        will be used to help define requirements and recommendations for calendaring
        and scheduling products. This particular document summarizes the results of
        the Timezone Technical Committee's questionnaire on Timezone support in iCalendar
        products. Other questionnaire summary documents will cover different areas
        of calendaring and scheduling, and will be made available by the Consortium.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/DIR10005-2019
    title:
      content: Guidelines for the implementation of the CalConnect patent policy
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10005.xml
    - type: pdf
      content: csd/cc-10005.pdf
    - type: doc
      content: csd/cc-10005.doc
    - type: html
      content: csd/cc-10005.html
    - type: rxl
      content: relaton/xml/cc-dir-10005-2019.rxl
    type: directive
    docid:
      id: CC/DIR 10005:2019
      type: CC
    docnumber: '10005'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-06-05'
    revdate: '2019-06-05'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/R18003-2019
    title:
      content: Calendar operator practices — Guidelines to protect against calendar
        abuse
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-18003.xml
    - type: pdf
      content: csd/cc-18003.pdf
    - type: doc
      content: csd/cc-18003.doc
    - type: html
      content: csd/cc-18003.html
    - type: rxl
      content: relaton/xml/cc-r-18003-2019.rxl
    type: report
    docid:
      id: CC/R 18003:2019
      type: CC
    docnumber: '18003'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - person:
        name:
          completename: Thomas Schäfer, 1&amp;1 Mail&amp;Media Development and Technology
            GmbH
      role: author
    - person:
        name:
          completename: Jesse Thompson, University of Wisconsin-Madison
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-01-18'
    revdate: '2019-01-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: CALSPAM
  - id: CC/Adm0804-2008
    title:
    - type: title-main
      content: June 2008 CalConnect Interoperability Test Report V1.3 (CD 0804)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: June 2008 CalConnect Interoperability Test Report V1.3 (CD 0804)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0804%20June%202008%20CalConnect%20Interoperability%20Test%20Report%20V1.3.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0804-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0804:2008
      type: CC
    date:
      type: published
      value: '2008-08-31'
    revdate: '2008-08-31'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R0602-2006
    title:
    - type: title-main
      content: iCalendar Timezone Problems and Recommendations V1.0 (CD 0602)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: iCalendar Timezone Problems and Recommendations V1.0 (CD 0602)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0602%20iCalendar%20Timezone%20Problems%20and%20Recommendations%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-r-0602-2006.rxl
    type: report
    docid:
      id: CC/R 0602:2006
      type: CC
    date:
      type: published
      value: '2006-01-24'
    revdate: '2006-01-24'
    abstract:
      content: This document was created by the TIMEZONE Technical Committee of the
        Calendaring and Scheduling Consortium. It contains information about common
        time zone implementation issues and recommendations on how to resolve these
        issues. We first justify the need for time zones, then we identify time zone
        implementation problems, and then offer some guidelines and recommendations.
        Take note that the listed recommendations often describe what vendors are
        currently doing to solve the problems.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1502-2015
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXXII (CD 1502)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXXII (CD 1502)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent32rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1502-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1502:2015
      type: CC
    date:
      type: published
      value: '2015-02-18'
    revdate: '2015-02-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1503-2015
    title:
    - type: title-main
      content: Report on CalConnect Conference XXXIII (CD 1503)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXXIII (CD 1503)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference33rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1503-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1503:2015
      type: CC
    date:
      type: published
      value: '2015-06-22'
    revdate: '2015-06-22'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF7953-2006
    title:
    - type: title-main
      content: Calendar Availability (VAVAILABILITY) (IETF RFC 7953)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Calendar Availability (VAVAILABILITY) (IETF RFC 7953)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7953
    - type: rxl
      content: relaton/xml/cc-ietf-7953-2006.rxl
    type: standard
    docid:
      id: CC/IETF 7953:2006
      type: CC
    date:
      type: published
      value: '2006-11-15'
    revdate: '2006-11-15'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1002-2010
    title:
    - type: title-main
      content: February 2010 CalConnect Interoperability Test Report V1.1 (CD 1002)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: February 2010 CalConnect Interoperability Test Report V1.1 (CD 1002)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1002%20February%202010%20CalConnect%20Interoperability%20Test%20Report%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1002-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1002:2010
      type: CC
    date:
      type: published
      value: '2010-03-25'
    revdate: '2010-03-25'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1805-2018
    title:
      content: Report on CalConnect Conference XLIII, September 24 - September 27,
        2018
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-43.xml
    - type: pdf
      content: csd/csd-report-conference-43.pdf
    - type: doc
      content: csd/csd-report-conference-43.doc
    - type: html
      content: csd/csd-report-conference-43.html
    - type: rxl
      content: relaton/xml/cc-a-1805-2018.rxl
    type: administrative
    docid:
      id: CC/A 1805:2018
      type: CC
    docnumber: '1805'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-10-23T00:00:00Z'
    revdate: '2018-10-23T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/A1804-2018
    title:
      content: Report on CalConnect Test Event and Developers Forum XLII, June 4-6,
        2018
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-42.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-42.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-42.doc
    - type: html
      content: csd/csd-report-ioptestevent-42.html
    - type: rxl
      content: relaton/xml/cc-a-1804-2018.rxl
    type: administrative
    docid:
      id: CC/A 1804:2018
      type: CC
    docnumber: '1804'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-06-29T00:00:00Z'
    revdate: '2018-06-29T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/Adm0612-2006
    title:
    - type: title-main
      content: September 2006 CalConnect Interoperability Test Report V1.2 (CD 0612)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: September 2006 CalConnect Interoperability Test Report V1.2 (CD 0612)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0612%20September%202006%20CalConnect%20Interoperability%20Test%20Report%20V1.2.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0612-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0612:2006
      type: CC
    date:
      type: published
      value: '2006-12-06'
    revdate: '2006-12-06'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0613-2006
    title:
    - type: title-main
      content: Report on Roundtable V (CD 0613)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable V (CD 0613)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable5rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0613-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0613:2006
      type: CC
    date:
      type: published
      value: '2006-01-12'
    revdate: '2006-01-12'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0910-2009
    title:
    - type: title-main
      content: Report on Roundtable XVI (CD 0910)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XVI (CD 0910)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable16rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0910-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0910:2009
      type: CC
    date:
      type: published
      value: '2009-10-19'
    revdate: '2009-10-19'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0911-2009
    title:
    - type: title-main
      content: October 2009 CalConnect Interoperability Test Report V2.0 (CD 0911)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: October 2009 CalConnect Interoperability Test Report V2.0 (CD 0911)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0911%20October%202009%20CalConnect%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0911-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0911:2009
      type: CC
    date:
      type: published
      value: '2009-11-24'
    revdate: '2009-11-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70001
    title:
    - type: title-main
      content: VALARM Extensions for iCalendar
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: VALARM Extensions for iCalendar
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-daboo-valarm-extensions/
    - type: rxl
      content: relaton/xml/cc-ietf-70001.rxl
    type: standard
    docid:
      id: CC/IETF 70001
      type: CC
    date:
      type: published
      value: '2009-07-06'
    revdate: '2009-07-06'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/A1706-2017
    title:
      content: Report on Test Event and Developers Forum XL, September 25-27 2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-40.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-40.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-40.doc
    - type: html
      content: csd/csd-report-ioptestevent-40.html
    - type: rxl
      content: relaton/xml/cc-a-1706-2017.rxl
    type: administrative
    docid:
      id: CC/A 1706:2017
      type: CC
    docnumber: '1706'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-11-20T00:00:00Z'
    revdate: '2017-11-20T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/IETF70025-2017
    title:
    - type: title-main
      content: Push Discovery and Notification Dispatch Protocol
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Push Discovery and Notification Dispatch Protocol
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-gajda-dav-push/
    - type: rxl
      content: relaton/xml/cc-ietf-70025-2017.rxl
    type: standard
    docid:
      id: CC/IETF 70025:2017
      type: CC
    date:
      type: published
      value: '2017-05-02'
    revdate: '2017-05-02'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70024-2017
    title:
    - type: title-main
      content: Support for Series in iCalendar
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Support for Series in iCalendar
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-icalendar-series/
    - type: rxl
      content: relaton/xml/cc-ietf-70024-2017.rxl
    type: standard
    docid:
      id: CC/IETF 70024:2017
      type: CC
    date:
      type: published
      value: '2017-02-15'
    revdate: '2017-02-15'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm1204-2012
    title:
    - type: title-main
      content: Report on Roundtable XXV (CD 1204)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXV (CD 1204)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable25rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1204-2012.rxl
    type: administrative
    docid:
      id: CC/Adm 1204:2012
      type: CC
    date:
      type: published
      value: '2012-10-18'
    revdate: '2012-10-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0501-2005
    title:
    - type: title-main
      content: January 2005 CalConnect Interoperability Test Scenarios V1.0 (CD 0501)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: January 2005 CalConnect Interoperability Test Scenarios V1.0 (CD 0501)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0501%20January%202005%20CalConnect%20Interoperability%20Test%20Scenarios%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0501-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0501:2005
      type: CC
    date:
      type: published
      value: '2005-01-12'
    revdate: '2005-01-12'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/CD51005-2018
    title:
      content: Calendaring and scheduling — Calendar subscription upgrades
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-51005.xml
    - type: pdf
      content: csd/cc-51005.pdf
    - type: doc
      content: csd/cc-51005.doc
    - type: html
      content: csd/cc-51005.html
    - type: rxl
      content: relaton/xml/cc-cd-51005-2018.rxl
    type: standard
    docid:
      id: CC/CD 51005:2018
      type: CC
    docnumber: '51005'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - person:
        name:
          completename: Michael Douglass
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-11-30'
    revdate: '2018-11-30'
    language: en
    script: Latn
    docstatus:
      stage: committee-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CALENDAR
  - id: CC/CD51004-2018
    title:
      content: Calendaring and scheduling — Support for iCalendar Relationships
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-51004.xml
    - type: pdf
      content: csd/cc-51004.pdf
    - type: doc
      content: csd/cc-51004.doc
    - type: html
      content: csd/cc-51004.html
    - type: rxl
      content: relaton/xml/cc-cd-51004-2018.rxl
    type: standard
    docid:
      id: CC/CD 51004:2018
      type: CC
    docnumber: '51004'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - person:
        name:
          completename: Michael Douglass
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-11-30'
    revdate: '2018-11-30'
    language: en
    script: Latn
    docstatus:
      stage: committee-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CALENDAR
  - id: CC/R1012-2011
    title:
    - type: title-main
      content: An Introduction to Internet Calendaring and Scheduling V1.1 (CD 1012)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: An Introduction to Internet Calendaring and Scheduling V1.1 (CD 1012)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://www.calconnect.org/resources/introduction-internet-calendaring
    - type: rxl
      content: relaton/xml/cc-r-1012-2011.rxl
    type: report
    docid:
      id: CC/R 1012:2011
      type: CC
    date:
      type: published
      value: '2011-10-20'
    revdate: '2011-10-20'
    abstract:
      content: This CalConnect guide introduces internet calendaring and the major
        standards and specifications related to calendaring and scheduling.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1604-2016
    title:
      content: Report on CalConnect Interoperability Test Event XXXVI, April 18-19,
        2016
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-36.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-36.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-36.doc
    - type: html
      content: csd/csd-report-ioptestevent-36.html
    - type: rxl
      content: relaton/xml/cc-a-1604-2016.rxl
    type: administrative
    docid:
      id: CC/A 1604:2016
      type: CC
    docnumber: '1604'
    date:
      type: published
      value: '2016-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2016-05-31T00:00:00Z'
    revdate: '2016-05-31T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2016'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/A1605-2016
    title:
      content: Report on CalConnect Conference XXXVII, September 14-16, 2016
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-37.xml
    - type: pdf
      content: csd/csd-report-conference-37.pdf
    - type: doc
      content: csd/csd-report-conference-37.doc
    - type: html
      content: csd/csd-report-conference-37.html
    - type: rxl
      content: relaton/xml/cc-a-1605-2016.rxl
    type: administrative
    docid:
      id: CC/A 1605:2016
      type: CC
    docnumber: '1605'
    date:
      type: published
      value: '2016-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: 2016-090-30T00:00:00Z
    revdate: 2016-090-30T00:00:00Z
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2016'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/Adm1307-2013
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXVIII (CD 1307)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXVIII (CD 1307)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent28rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1307-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1307:2013
      type: CC
    date:
      type: published
      value: '2013-10-24'
    revdate: '2013-10-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1306-2013
    title:
    - type: title-main
      content: Report on Roundtable XXVIII (CD 1306)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXVIII (CD 1306)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable28rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1306-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1306:2013
      type: CC
    date:
      type: published
      value: '2013-10-10'
    revdate: '2013-10-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0812-2008
    title:
    - type: title-main
      content: Meet CalConnect 2008 (CD 0812)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Meet CalConnect 2008 (CD 0812)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: http://www.calconnect.org/pubdocs/CD0812%20Meet%20CalConnect%202008%20V1.0.zip
    - type: rxl
      content: relaton/xml/cc-adm-0812-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0812:2008
      type: CC
    date:
      type: published
      value: '2008-11-07'
    revdate: '2008-11-07'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70007-2011
    title:
    - type: title-main
      content: CalDAV Managed Attachments
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalDAV Managed Attachments
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-ietf-calext-caldav-attachments/
    - type: rxl
      content: relaton/xml/cc-ietf-70007-2011.rxl
    type: standard
    docid:
      id: CC/IETF 70007:2011
      type: CC
    date:
      type: published
      value: '2011-10-24'
    revdate: '2011-10-24'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70006-2011
    title:
    - type: title-main
      content: Collected Extensions to CalDAV
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Collected Extensions to CalDAV
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-daboo-caldav-extensions/
    - type: rxl
      content: relaton/xml/cc-ietf-70006-2011.rxl
    type: standard
    docid:
      id: CC/IETF 70006:2011
      type: CC
    date:
      type: published
      value: '2011-10-24'
    revdate: '2011-10-24'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0403-2004
    title:
    - type: title-main
      content: July 2004 CalConnect Interoperability Test Report V1.0 (CD 0403)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: July 2004 CalConnect Interoperability Test Report V1.0 (CD 0403)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0403%20July%202004%20CalConnect%20Interoperability%20Test%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0403-2004.rxl
    type: administrative
    docid:
      id: CC/Adm 0403:2004
      type: CC
    date:
      type: published
      value: '2004-07-30'
    revdate: '2004-07-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0402-2004
    title:
    - type: title-main
      content: July 2004 CalConnect Interoperability Test Results Spreadsheet V1.0
        (CD 0402)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: July 2004 CalConnect Interoperability Test Results Spreadsheet V1.0
        (CD 0402)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0402%20July%202004%20CalConnect%20Interoperability%20Test%20Results%20Spreadsheet%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0402-2004.rxl
    type: administrative
    docid:
      id: CC/Adm 0402:2004
      type: CC
    date:
      type: published
      value: '2004-07-30'
    revdate: '2004-07-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R0904-2011
    title:
    - type: title-main
      content: iCalendar in XML (xCal) Schema (CD 0904)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: iCalendar in XML (xCal) Schema (CD 0904)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://www.calconnect.org/resources/code-artifacts/icalendar-xml-schema
    - type: rxl
      content: relaton/xml/cc-r-0904-2011.rxl
    type: report
    docid:
      id: CC/R 0904:2011
      type: CC
    date:
      type: published
      value: '2011-08-10'
    revdate: '2011-08-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1014-2011
    title:
    - type: title-main
      content: October 2010 CalConnect Interoperability Test Event Report V1.0 (CD
        1014)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: October 2010 CalConnect Interoperability Test Event Report V1.0 (CD
        1014)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1014%20October%202010%20CalConnect%20Interoperability%20Test%20Event%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1014-2011.rxl
    type: administrative
    docid:
      id: CC/Adm 1014:2011
      type: CC
    date:
      type: published
      value: '2011-01-11'
    revdate: '2011-01-11'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0711-2007
    title:
    - type: title-main
      content: Report on Roundtable VIII (CD 0711)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable VIII (CD 0711)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable8rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0711-2007.rxl
    type: administrative
    docid:
      id: CC/Adm 0711:2007
      type: CC
    date:
      type: published
      value: '2007-02-02'
    revdate: '2007-02-02'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0710-2007
    title:
    - type: title-main
      content: September 2007 CalConnect Interoperability Test Report V2.0 (CD 0710)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: September 2007 CalConnect Interoperability Test Report V2.0 (CD 0710)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0710%20September%202007%20CalConnect%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0710-2007.rxl
    type: administrative
    docid:
      id: CC/Adm 0710:2007
      type: CC
    date:
      type: published
      value: '2007-12-14'
    revdate: '2007-12-14'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/DIR10001-2019
    title:
      content: 'CalConnect Directive: Standardization and publication'
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10001.xml
    - type: pdf
      content: csd/cc-10001.pdf
    - type: doc
      content: csd/cc-10001.doc
    - type: html
      content: csd/cc-10001.html
    - type: rxl
      content: relaton/xml/cc-dir-10001-2019.rxl
    type: directive
    docid:
      id: CC/DIR 10001:2019
      type: CC
    docnumber: '10001'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-01-18'
    revdate: '2019-01-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/IETF7986-2010
    title:
    - type: title-main
      content: New Properties for iCalendar (IETF RFC 7986)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: New Properties for iCalendar (IETF RFC 7986)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7986
    - type: rxl
      content: relaton/xml/cc-ietf-7986-2010.rxl
    type: standard
    docid:
      id: CC/IETF 7986:2010
      type: CC
    date:
      type: published
      value: '2010-02-26'
    revdate: '2010-02-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/NP34000
    title:
    - type: title-intro
      content: Date and time
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Concepts and vocabulary
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Date and time – Concepts and vocabulary
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-34000.rxl
    type: standard
    docid:
      id: CC/ISO/NP 34000
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/IETF6638-2012
    title:
    - type: title-main
      content: Scheduling Extensions to CalDAV (IETF RFC 6638)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Scheduling Extensions to CalDAV (IETF RFC 6638)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc6638
    - type: rxl
      content: relaton/xml/cc-ietf-6638-2012.rxl
    type: standard
    docid:
      id: CC/IETF 6638:2012
      type: CC
    date:
      type: published
      value: '2012-06-01'
    revdate: '2012-06-01'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R0905-2009
    title:
    - type: title-main
      content: State of Resource Interoperability for Calendaring, Groupware, and
        Project (CD 0905) Management V1.0
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: State of Resource Interoperability for Calendaring, Groupware, and
        Project (CD 0905) Management V1.0
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0905%20State%20of%20Resource%20Interoperability%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-r-0905-2009.rxl
    type: report
    docid:
      id: CC/R 0905:2009
      type: CC
    date:
      type: published
      value: '2009-06-10'
    revdate: '2009-06-10'
    abstract:
      content: This document was created by the USECASE Technical Committee of the
        Calendaring and Scheduling Consortium. This document is a survey of the present
        state of resource interoperability for a representative sample of calendaring,
        groupware, and project management applications. \"Interoperability of resources\"
        within the domains surveyed is a level of functionality that allows the communication
        of resource information between applications that is humanly useful though
        not necessarily identical for both systems.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0801-2008
    title:
    - type: title-main
      content: CalConnect Technical Preview Roundtable XI V1.0 (CD 0801)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalConnect Technical Preview Roundtable XI V1.0 (CD 0801)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0801%20CalConnect%20Technical%20Preview%20Roundtable%20XI%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0801-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0801:2008
      type: CC
    date:
      type: published
      value: '2008-02-06'
    revdate: '2008-02-06'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S1301-2012
    title:
    - type: title-main
      content: CalWS-SOAP SOAP Web Services Protocol for Calendaring V1.0 (CD 1301)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalWS-SOAP SOAP Web Services Protocol for Calendaring V1.0 (CD 1301)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1301%20CalWS-SOAP%20SOAP%20Web%20Services%20Protocol%20for%20Calendaring%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-1301-2012.rxl
    type: specification
    docid:
      id: CC/S 1301:2012
      type: CC
    date:
      type: published
      value: '2013-01-10'
    revdate: '2013-01-10'
    abstract:
      content: "This document, developed by the XML Technical Committee, specifies
        a SOAP web services Protocol for calendaring operations. This protocol has
        been contributed to OASIS WS-CALENDAR as a component of the WS-CALENDAR Specification
        under development by OASIS.\nCalConnect and OASIS have agreed that any future
        work by CalConnect TC XML or OASIS WS-Calendar (or other committees in CalConnect
        and OASIS) on their respective versions of CalWS will be harmonized to maintain
        consistency between the versions. CalConnect and OASIS reserve the right to
        jointly and formally agree to fork the specifications at some point in the
        future if need arises. "
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1506-2015
    title:
    - type: title-main
      content: Report on CalConnect Conference XXXIV (CD 1506)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXXIV (CD 1506)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference34rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1506-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1506:2015
      type: CC
    date:
      type: published
      value: '2015-10-23'
    revdate: '2015-10-23'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0909-2009
    title:
    - type: title-main
      content: June 2009 CalConnect Interoperability Test Report V2.0 (CD 0909)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: June 2009 CalConnect Interoperability Test Report V2.0 (CD 0909)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0909%20June%202009%20CalConnect%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0909-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0909:2009
      type: CC
    date:
      type: published
      value: '2009-08-30'
    revdate: '2009-08-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0908-2009
    title:
    - type: title-main
      content: Report on Roundtable XV (CD 0908)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XV (CD 0908)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable15rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0908-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0908:2009
      type: CC
    date:
      type: published
      value: '2009-06-11'
    revdate: '2009-06-11'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R1102-2013
    title:
    - type: title-main
      content: Calendaring and Scheduling Glossary of Terms V2.2 (CD 1102)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Calendaring and Scheduling Glossary of Terms V2.2 (CD 1102)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://www.calconnect.org/resources/glossary
    - type: rxl
      content: relaton/xml/cc-r-1102-2013.rxl
    type: report
    docid:
      id: CC/R 1102:2013
      type: CC
    date:
      type: published
      value: '2013-05-02'
    revdate: '2013-05-02'
    abstract:
      content: A Glossary of Calendaring and Scheduling Terms.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adv0514-2005
    title:
    - type: title-main
      content: DST Advisory Notice V1.0 (CD 0514)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: DST Advisory Notice V1.0 (CD 0514)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0514%20DST%20Advisory%20Notice%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adv-0514-2005.rxl
    type: advisory
    docid:
      id: CC/Adv 0514:2005
      type: CC
    date:
      type: published
      value: '2005-06-29'
    revdate: '2005-06-29'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/NP34003
    title:
    - type: title-intro
      content: Date and time
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Codes for calendar systems
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Date and time – Codes for calendar systems
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-34003.rxl
    type: standard
    docid:
      id: CC/ISO/NP 34003
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/Adm1405-2014
    title:
    - type: title-main
      content: Report on CalConnect Conference XXX (CD 1405)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXX (CD 1405)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference30rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1405-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1405:2014
      type: CC
    date:
      type: published
      value: '2014-06-09'
    revdate: '2014-06-09'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1404-2014
    title:
    - type: title-main
      content: Report on Interoperability Test Event at CalConnect XXX (CD 1404)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event at CalConnect XXX (CD 1404)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent30rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1404-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1404:2014
      type: CC
    date:
      type: published
      value: '2014-06-09'
    revdate: '2014-06-09'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF6868-2013
    title:
    - type: title-main
      content: Parameter Value Encoding in iCalendar and vCard (IETF RFC 6868)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Parameter Value Encoding in iCalendar and vCard (IETF RFC 6868)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc6868
    - type: rxl
      content: relaton/xml/cc-ietf-6868-2013.rxl
    type: standard
    docid:
      id: CC/IETF 6868:2013
      type: CC
    date:
      type: published
      value: '2013-02-01'
    revdate: '2013-02-01'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1105-2011
    title:
    - type: title-main
      content: Report on Roundtable XXI (CD 1105)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXI (CD 1105)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable21rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1105-2011.rxl
    type: administrative
    docid:
      id: CC/Adm 1105:2011
      type: CC
    date:
      type: published
      value: '2011-06-20'
    revdate: '2011-06-20'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0507-2005
    title:
    - type: title-main
      content: CalDAV Use Cases V1.0 (CD 0507)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalDAV Use Cases V1.0 (CD 0507)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0507%20CalDAV%20Use%20Cases%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0507-2005.rxl
    type: specification
    docid:
      id: CC/S 0507:2005
      type: CC
    date:
      type: published
      value: '2005-09-26'
    revdate: '2005-09-26'
    abstract:
      content: This document is one in a series of use case documents that the Calendaring
        and Scheduling Consortium is developing to help better define the needs of
        different calendaring and scheduling user groups. As such, this document provides
        a list of use cases for a calendar access protocol only. Other use case documents
        will cover different areas of calendaring and scheduling, and will be made
        available by the Consortium in the usual manner. While this list of use cases
        was developed to assist in the development of the CalDAV protocol, none of
        the use cases are specific to CalDAV, that is, this list of use cases should
        apply to any calendar access protocol. It is expected that this document will
        be used as a basis to further develop technical requirements for a calendar
        access protocol such as CalDAV.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF7529-2013
    title:
    - type: title-main
      content: Non-Gregorian Recurrence Rules in iCalendar (RSCALE) (IETF RFC 7529)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Non-Gregorian Recurrence Rules in iCalendar (RSCALE) (IETF RFC 7529)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7529
    - type: rxl
      content: relaton/xml/cc-ietf-7529-2013.rxl
    type: standard
    docid:
      id: CC/IETF 7529:2013
      type: CC
    date:
      type: published
      value: '2013-04-26'
    revdate: '2013-04-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70014-2013
    title:
    - type: title-main
      content: Improved Support for iCalendar Relationships
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Improved Support for iCalendar Relationships
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-ietf-calext-ical-relations/
    - type: rxl
      content: relaton/xml/cc-ietf-70014-2013.rxl
    type: standard
    docid:
      id: CC/IETF 70014:2013
      type: CC
    date:
      type: published
      value: '2013-07-02'
    revdate: '2013-07-02'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0513-2005
    title:
    - type: title-main
      content: Report on Roundtable IV (CD 0513)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable IV (CD 0513)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable4rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0513-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0513:2005
      type: CC
    date:
      type: published
      value: '2005-09-15'
    revdate: '2005-09-15'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0512-2005
    title:
    - type: title-main
      content: Report on Roundtable III (CD 0512)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable III (CD 0512)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable3rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0512-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0512:2005
      type: CC
    date:
      type: published
      value: '2005-06-03'
    revdate: '2005-06-03'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF6352-2011
    title:
    - type: title-main
      content: 'CardDAV: vCard Extensions to Web Distributed Authoring and Versioning
        (WebDAV) (IETF RFC 6352)'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'CardDAV: vCard Extensions to Web Distributed Authoring and Versioning
        (WebDAV) (IETF RFC 6352)'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc6352
    - type: rxl
      content: relaton/xml/cc-ietf-6352-2011.rxl
    type: standard
    docid:
      id: CC/IETF 6352:2011
      type: CC
    date:
      type: published
      value: '2011-08-01'
    revdate: '2011-08-01'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S1202-2012
    title:
    - type: title-main
      content: CalWS-SOAP SOAP Web Services Protocol for Calendaring V1.0 (CD 1202)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalWS-SOAP SOAP Web Services Protocol for Calendaring V1.0 (CD 1202)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1202%20CalWS-SOAP%20SOAP%20Web%20Services%20Protocol%20for%20Calendaring%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-1202-2012.rxl
    type: specification
    docid:
      id: CC/S 1202:2012
      type: CC
    date:
      type: published
      value: '2012-02-22'
    revdate: '2012-02-22'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0902-2009
    title:
    - type: title-main
      content: February 2009 CalConnect Interoperability Test Report V2.0 (CD 0902)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: February 2009 CalConnect Interoperability Test Report V2.0 (CD 0902)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0902%20February%202009%20CalConnect%20Interoperability%20Test%20Report%20V2.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0902-2009.rxl
    type: administrative
    docid:
      id: CC/Adm 0902:2009
      type: CC
    date:
      type: published
      value: '2009-04-14'
    revdate: '2009-04-14'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/NP34002
    title:
    - type: title-intro
      content: Date and time
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Timezones
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Date and time – Timezones
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-34002.rxl
    type: standard
    docid:
      id: CC/ISO/NP 34002
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/Adm1303-2013
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXVI (CD 1303)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXVI (CD 1303)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent26rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1303-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1303:2013
      type: CC
    date:
      type: published
      value: '2013-02-20'
    revdate: '2013-02-20'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1302-2013
    title:
    - type: title-main
      content: Report on Roundtable XXVI (CD 1302)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXVI (CD 1302)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable26rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1302-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1302:2013
      type: CC
    date:
      type: published
      value: '2013-02-20'
    revdate: '2013-02-20'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/FDS18012-2018
    title:
      content: Date and time — General recurrence representation
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-18012.xml
    - type: pdf
      content: csd/cc-18012.pdf
    - type: doc
      content: csd/cc-18012.doc
    - type: html
      content: csd/cc-18012.html
    - type: rxl
      content: relaton/xml/cc-fds-18012-2018.rxl
    type: standard
    docid:
      id: CC/FDS 18012:2018
      type: CC
    docnumber: '18012'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-09-10T00:00:00Z'
    revdate: '2018-09-10T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: final-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: VCARD, CALENDAR
  - id: CC/IETF70008-2012
    title:
    - type: title-main
      content: vCard Representation of Resources
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: vCard Representation of Resources
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-cal-resource-vcard/
    - type: rxl
      content: relaton/xml/cc-ietf-70008-2012.rxl
    type: standard
    docid:
      id: CC/IETF 70008:2012
      type: CC
    date:
      type: published
      value: '2012-04-09'
    revdate: '2012-04-09'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70009-2012
    title:
    - type: title-main
      content: Automated Service Configuration
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Automated Service Configuration
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-daboo-aggregated-service-discovery/
    - type: rxl
      content: relaton/xml/cc-ietf-70009-2012.rxl
    type: standard
    docid:
      id: CC/IETF 70009:2012
      type: CC
    date:
      type: published
      value: '2012-08-29'
    revdate: '2012-08-29'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/S1004-2010
    title:
    - type: title-main
      content: Cal-WS Web Services API for Calendaring and Scheduling V0.3 (CD 1004)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Cal-WS Web Services API for Calendaring and Scheduling V0.3 (CD 1004)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1004%20Cal-WS%20Web%20Services%20API%20V0.3.pdf
    - type: rxl
      content: relaton/xml/cc-s-1004-2010.rxl
    type: specification
    docid:
      id: CC/S 1004:2010
      type: CC
    date:
      type: published
      value: '2010-05-19'
    revdate: '2010-05-19'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/ISO/NP36002
    title:
    - type: title-intro
      content: Standardization documents
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Metanorma
      language: en
      script: Latn
      format: text/plain
    - type: title-part
      content: Representation in XML
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Standardization documents – Metanorma – Representation in XML
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-36002.rxl
    type: standard
    docid:
      id: CC/ISO/NP 36002
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/Adm1010-2010
    title:
    - type: title-main
      content: TC MOBILE Interoperability Test Event Report V1.0 (CD 1010)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: TC MOBILE Interoperability Test Event Report V1.0 (CD 1010)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1010%20TC%20MOBILE%20Interoperability%20Test%20Event%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1010-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1010:2010
      type: CC
    date:
      type: published
      value: '2010-09-10'
    revdate: '2010-09-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1902-2019
    title:
      content: Report on CalConnect Conference XLV, June 3 - June 7, 2019
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-45.xml
    - type: pdf
      content: csd/csd-report-conference-45.pdf
    - type: doc
      content: csd/csd-report-conference-45.doc
    - type: html
      content: csd/csd-report-conference-45.html
    - type: rxl
      content: relaton/xml/cc-a-1902-2019.rxl
    type: administrative
    docid:
      id: CC/A 1902:2019
      type: CC
    docnumber: '1902'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-07-10T00:00:00Z'
    revdate: '2019-07-10T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/R0610-2006
    title:
    - type: title-main
      content: Calendaring and Scheduling Glossary of Terms V1.0 (Obsoleted by CD1102)
        (CD 0610)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Calendaring and Scheduling Glossary of Terms V1.0 (Obsoleted by CD1102)
        (CD 0610)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0610%20Calendaring%20and%20Scheduling%20Glossary%20of%20Terms%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-r-0610-2006.rxl
    type: report
    docid:
      id: CC/R 0610:2006
      type: CC
    date:
      type: published
      value: '2006-10-24'
    revdate: '2006-10-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0701-2007
    title:
    - type: title-main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases for Tasks V1.0 (CD
        0701)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Min-IOP (Minimum Interoperable Subset) Use Cases for Tasks V1.0 (CD
        0701)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0701%20Min-IOP%20Use%20Cases%20for%20Tasks%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0701-2007.rxl
    type: specification
    docid:
      id: CC/S 0701:2007
      type: CC
    date:
      type: published
      value: '2007-04-19'
    revdate: '2007-04-19'
    abstract:
      content: This document was created by the Use Case Technical Committee of the
        Calendaring and Scheduling Consortium and defines the use cases for minimum
        interoperablity for tasks support (VTODO) for calendaring and scheduling.
        Minimum interoperability is the basic level of functionality our collective
        experience tells us is necessary to have a useful system. We realize that
        in some cases it may be more than is currently offered by 'basic' calendaring
        and scheduling applications.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0714-2007
    title:
    - type: title-main
      content: "VCARD WKSP\tReport on CalConnect vCard Workshop September 18 2007
        (CD 0714)"
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: "VCARD WKSP\tReport on CalConnect vCard Workshop September 18 2007
        (CD 0714)"
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/vcardworkshopreport.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0714-2007.rxl
    type: administrative
    docid:
      id: CC/Adm 0714:2007
      type: CC
    date:
      type: published
      value: '2007-09-18'
    revdate: '2007-09-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70002-2010
    title:
    - type: title-main
      content: Schema for representing resources for calendaring and scheduling services
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Schema for representing resources for calendaring and scheduling services
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-cal-resource-schema/
    - type: rxl
      content: relaton/xml/cc-ietf-70002-2010.rxl
    type: standard
    docid:
      id: CC/IETF 70002:2010
      type: CC
    date:
      type: published
      value: '2010-04-30'
    revdate: '2010-04-30'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70003-2010
    title:
    - type: title-main
      content: Timezone XML Specification
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Timezone XML Specification
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-timezone-xml/
    - type: rxl
      content: relaton/xml/cc-ietf-70003-2010.rxl
    type: standard
    docid:
      id: CC/IETF 70003:2010
      type: CC
    date:
      type: published
      value: '2010-07-05'
    revdate: '2010-07-05'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/FDS10010-2019
    title:
      content: ISO/CalConnect Partner Standards Development Organization (PSDO) Cooperation
        Agreement
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10010.xml
    - type: pdf
      content: csd/cc-10010.pdf
    - type: doc
      content: csd/cc-10010.doc
    - type: html
      content: csd/cc-10010.html
    - type: rxl
      content: relaton/xml/cc-fds-10010-2019.rxl
    type: standard
    docid:
      id: CC/FDS 10010:2019
      type: CC
    docnumber: '10010'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-01-18'
    revdate: '2019-01-18'
    language: en
    script: Latn
    docstatus:
      stage: final-draft
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/IETF6321-2009
    title:
    - type: title-main
      content: xCal - The XML Format for iCalendar (IETF RFC 6351)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: xCal - The XML Format for iCalendar (IETF RFC 6351)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc6321
    - type: rxl
      content: relaton/xml/cc-ietf-6321-2009.rxl
    type: standard
    docid:
      id: CC/IETF 6321:2009
      type: CC
    date:
      type: published
      value: '2009-06-04'
    revdate: '2009-06-04'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1801-2018
    title:
      content: Report on CalConnect Conference XLI, January 31 - February 2, 2018
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-41.xml
    - type: pdf
      content: csd/csd-report-conference-41.pdf
    - type: doc
      content: csd/csd-report-conference-41.doc
    - type: html
      content: csd/csd-report-conference-41.html
    - type: rxl
      content: relaton/xml/cc-a-1801-2018.rxl
    type: administrative
    docid:
      id: CC/A 1801:2018
      type: CC
    docnumber: '1801'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-03-02T00:00:00Z'
    revdate: '2018-03-02T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/IETF70015-2014
    title:
    - type: title-main
      content: 'WebDAV: User Notifications'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'WebDAV: User Notifications'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-pot-webdav-notifications/
    - type: rxl
      content: relaton/xml/cc-ietf-70015-2014.rxl
    type: standard
    docid:
      id: CC/IETF 70015:2014
      type: CC
    date:
      type: published
      value: '2014-12-15'
    revdate: '2014-12-15'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70020-2016
    title:
    - type: title-main
      content: CalDAV Calendar Sharing
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalDAV Calendar Sharing
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-pot-caldav-sharing/
    - type: rxl
      content: relaton/xml/cc-ietf-70020-2016.rxl
    type: standard
    docid:
      id: CC/IETF 70020:2016
      type: CC
    date:
      type: published
      value: '2016-01-11'
    revdate: '2016-01-11'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF70021-2016
    title:
    - type: title-main
      content: CardDAV Address Book Sharing
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CardDAV Address Book Sharing
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-pot-carddav-sharing/
    - type: rxl
      content: relaton/xml/cc-ietf-70021-2016.rxl
    type: standard
    docid:
      id: CC/IETF 70021:2016
      type: CC
    date:
      type: published
      value: '2016-06-27'
    revdate: '2016-06-27'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/ISO/NP36001
    title:
    - type: title-intro
      content: Standardization documents
      language: en
      script: Latn
      format: text/plain
    - type: title-main
      content: Metanorma
      language: en
      script: Latn
      format: text/plain
    - type: title-part
      content: Document metamodel
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Standardization documents – Metanorma – Document metamodel
      language: en
      script: Latn
      format: text/plain
    link:
      type: rxl
      content: relaton/xml/cc-iso-np-36001.rxl
    type: standard
    docid:
      id: CC/ISO/NP 36001
      type: CC
    date:
      type: published
      value: '2018-10-25'
    revdate: '2018-10-25'
    docstatus:
      stage: proposal
    fetched: '2019-09-25'
  - id: CC/Adm1201-2012
    title:
    - type: title-main
      content: Report on Roundtable XXIII (CD 1201)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXIII (CD 1201)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable23rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1201-2012.rxl
    type: administrative
    docid:
      id: CC/Adm 1201:2012
      type: CC
    date:
      type: published
      value: '2012-02-15'
    revdate: '2012-02-15'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1703-2017
    title:
      content: Report on CalConnect Conference XXXIX, June 14-16, 2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-39.xml
    - type: pdf
      content: csd/csd-report-conference-39.pdf
    - type: doc
      content: csd/csd-report-conference-39.doc
    - type: html
      content: csd/csd-report-conference-39.html
    - type: rxl
      content: relaton/xml/cc-a-1703-2017.rxl
    type: administrative
    docid:
      id: CC/A 1703:2017
      type: CC
    docnumber: '1703'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-07-18T00:00:00Z'
    revdate: '2017-07-18T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/A1702-2017
    title:
      content: Report on Test Event and Developers Forum XXXVIII, February 13-15,
        2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-38.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-38.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-38.doc
    - type: html
      content: csd/csd-report-ioptestevent-38.html
    - type: rxl
      content: relaton/xml/cc-a-1702-2017.rxl
    type: administrative
    docid:
      id: CC/A 1702:2017
      type: CC
    docnumber: '1702'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-03-10T00:00:00Z'
    revdate: '2017-03-10T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/Adm0504-2005
    title:
    - type: title-main
      content: June 2005 CalConnect Interoperability Test Report V1.0 (CD 0504)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: June 2005 CalConnect Interoperability Test Report V1.0 (CD 0504)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0504%20June%202005%20CalConnect%20Interoperability%20Test%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0504-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0504:2005
      type: CC
    date:
      type: published
      value: '2005-06-18'
    revdate: '2005-06-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0505-2005
    title:
    - type: title-main
      content: Results from First Recurrence Questionnaire V1.0 (CD 0505)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Results from First Recurrence Questionnaire V1.0 (CD 0505)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0505%20Results%20from%20First%20Recurrence%20Questionnaire%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0505-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0505:2005
      type: CC
    date:
      type: published
      value: '2005-07-21'
    revdate: '2005-07-21'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adv0611-2006
    title:
    - type: title-main
      content: The Benefits of iCalendar for the Mobile Industry V1.0 (CD 0611)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: The Benefits of iCalendar for the Mobile Industry V1.0 (CD 0611)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0611%20The%20Benefits%20of%20iCalendar%20for%20the%20Mobile%20Industry%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adv-0611-2006.rxl
    type: advisory
    docid:
      id: CC/Adv 0611:2006
      type: CC
    date:
      type: published
      value: '2006-11-27'
    revdate: '2006-11-27'
    abstract:
      content: 'This document, prepared by the Mobile Technical Committee, discusses
        the benefits and value of converting to the iCalendar specification from its
        early predecessor, vCalendar, still widely in use in the mobile and travel
        industries. The document draws upon results from the Mobile Calendaring Questionnaires
        conducted earlier this year by TC Mobile; see Mobile Calendaring Questionnaire
        V2 Results: CD 0609.'
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1304-2013
    title:
    - type: title-main
      content: Report on Roundtable XXVII (CD 1304)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XXVII (CD 1304)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable27rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1304-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1304:2013
      type: CC
    date:
      type: published
      value: '2013-07-08'
    revdate: '2013-07-08'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1305-2013
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXVII (CD 1305)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXVII (CD 1305)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent27rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1305-2013.rxl
    type: administrative
    docid:
      id: CC/Adm 1305:2013
      type: CC
    date:
      type: published
      value: '2013-07-10'
    revdate: '2013-07-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1606-2016
    title:
      content: Report on CalConnect Test Event and Developers Forum XXXVII, September
        12-14, 2016
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-37.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-37.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-37.doc
    - type: html
      content: csd/csd-report-ioptestevent-37.html
    - type: rxl
      content: relaton/xml/cc-a-1606-2016.rxl
    type: administrative
    docid:
      id: CC/A 1606:2016
      type: CC
    docnumber: '1606'
    date:
      type: published
      value: '2016-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2016-10-07T00:00:00Z'
    revdate: '2016-10-07T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2016'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/IETF70005-2011
    title:
    - type: title-main
      content: Event Publishing Extensions to iCalendar
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Event Publishing Extensions to iCalendar
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-calendar-extension/
    - type: rxl
      content: relaton/xml/cc-ietf-70005-2011.rxl
    type: standard
    docid:
      id: CC/IETF 70005:2011
      type: CC
    date:
      type: published
      value: '2011-02-16'
    revdate: '2011-02-16'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0810-2008
    title:
    - type: title-main
      content: Report on Roundtable XII (CD 0810)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XII (CD 0810)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable12rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0810-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0810:2008
      type: CC
    date:
      type: published
      value: '2008-06-06'
    revdate: '2008-06-06'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0811-2008
    title:
    - type: title-main
      content: Report on Roundtable XIII (CD 0811)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XIII (CD 0811)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable13rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0811-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0811:2008
      type: CC
    date:
      type: published
      value: '2008-10-10'
    revdate: '2008-10-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0401-2004
    title:
    - type: title-main
      content: July 2004 CalConnect Interoperability Test Rules and Test Scenarios
        V1.0 (CD 0401)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: July 2004 CalConnect Interoperability Test Rules and Test Scenarios
        V1.0 (CD 0401)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0401%20July%202004%20CalConnect%20Interoperability%20Test%20Rules%20and%20Test%20Scenarios%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0401-2004.rxl
    type: administrative
    docid:
      id: CC/Adm 0401:2004
      type: CC
    date:
      type: published
      value: '2004-07-30'
    revdate: '2004-07-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0509-2005
    title:
    - type: title-main
      content: Educause 2005 Overview of The Calendaring and Scheduling Consortium
        V1.0 (CD 0509)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Educause 2005 Overview of The Calendaring and Scheduling Consortium
        V1.0 (CD 0509)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0509%20Educause%202005%20Overview%20of%20The%20Calendaring%20and%20Scheduling%20Consortium%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0509-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0509:2005
      type: CC
    date:
      type: published
      value: '2005-09-26'
    revdate: '2005-09-26'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0508-2005
    title:
    - type: title-main
      content: Overview of The Calendaring and Scheduling Consortium V1.0 (CD 0508)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Overview of The Calendaring and Scheduling Consortium V1.0 (CD 0508)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0508%20Overview%20of%20The%20Calendaring%20and%20Scheduling%20Consortium%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0508-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0508:2005
      type: CC
    date:
      type: published
      value: '2005-10-11'
    revdate: '2005-10-11'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70018-2015
    title:
    - type: title-main
      content: DAV Server Information Object
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: DAV Server Information Object
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-server-info/
    - type: rxl
      content: relaton/xml/cc-ietf-70018-2015.rxl
    type: standard
    docid:
      id: CC/IETF 70018:2015
      type: CC
    date:
      type: published
      value: '2015-05-15'
    revdate: '2015-05-15'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/IETF7095-2014
    title:
    - type: title-main
      content: 'jCard: The JSON Format for vCard  (IETF RFC 7095)'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'jCard: The JSON Format for vCard  (IETF RFC 7095)'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://tools.ietf.org/html/rfc7095
    - type: rxl
      content: relaton/xml/cc-ietf-7095-2014.rxl
    type: standard
    docid:
      id: CC/IETF 7095:2014
      type: CC
    date:
      type: published
      value: '2014-01-16'
    revdate: '2014-01-16'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70019-2015
    title:
    - type: title-main
      content: 'v-event URI: An URI scheme for events'
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: 'v-event URI: An URI scheme for events'
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-menderico-v-event-uri/
    - type: rxl
      content: relaton/xml/cc-ietf-70019-2015.rxl
    type: standard
    docid:
      id: CC/IETF 70019:2015
      type: CC
    date:
      type: published
      value: '2015-11-24'
    revdate: '2015-11-24'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0712-2007
    title:
    - type: title-main
      content: Report on Roundtable IX (CD 0712)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable IX (CD 0712)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable9rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0712-2007.rxl
    type: administrative
    docid:
      id: CC/Adm 0712:2007
      type: CC
    date:
      type: published
      value: '2007-05-11'
    revdate: '2007-05-11'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0713-2007
    title:
    - type: title-main
      content: Report on Roundtable X (CD 0713)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable X (CD 0713)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable10rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0713-2007.rxl
    type: administrative
    docid:
      id: CC/Adm 0713:2007
      type: CC
    date:
      type: published
      value: '2007-09-21'
    revdate: '2007-09-21'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70004-2010
    title:
    - type: title-main
      content: CardDAV Directory Gateway Extension
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CardDAV Directory Gateway Extension
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-daboo-carddav-directory-gateway/
    - type: rxl
      content: relaton/xml/cc-ietf-70004-2010.rxl
    type: standard
    docid:
      id: CC/IETF 70004:2010
      type: CC
    date:
      type: published
      value: '2010-08-26'
    revdate: '2010-08-26'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/S0706-2007
    title:
    - type: title-main
      content: Mobile Calendar Interoperability Test Suite V1.0 (CD 0706)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Mobile Calendar Interoperability Test Suite V1.0 (CD 0706)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0706%20Mobile%20Calendar%20Interoperability%20Test%20Suite%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0706-2007.rxl
    type: specification
    docid:
      id: CC/S 0706:2007
      type: CC
    date:
      type: published
      value: '2007-08-28'
    revdate: '2007-08-28'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R1011-2010
    title:
    - type: title-main
      content: CalWS-Rest Restful Web Services Protocol for Calendaring V1.0.1 (CD
        1011)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalWS-Rest Restful Web Services Protocol for Calendaring V1.0.1 (CD
        1011)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD1011%20CalWS-Rest%20Restful%20Web%20Services%20Protocol%20for%20Calendaring%20V1.0.1.pdf
    - type: rxl
      content: relaton/xml/cc-r-1011-2010.rxl
    type: report
    docid:
      id: CC/R 1011:2010
      type: CC
    date:
      type: published
      value: '2010-02-22'
    revdate: '2010-02-22'
    abstract:
      content: |-
        This document, developed by the XML Technical Committee, specifies a RESTful web services Protocol for calendaring operations. This protocol has been contributed to OASIS WS-CALENDAR as a component of the WS-CALENDAR Specification under development by OASIS.
        CalConnect and OASIS have agreed that any future work by CalConnect TC XML or OASIS WS-Calendar (or other committees in CalConnect and OASIS) on their respective versions of CalWS will be harmonized to maintain consistency between the versions. CalConnect and OASIS reserve the right to jointly and formally agree to fork the specifications at some point in the future if need arises.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0610-2006
    title:
    - type: title-main
      content: Calendaring and Scheduling Glossary of Terms V1.0 (Obsoleted by CD1102)
        (CD 0610)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Calendaring and Scheduling Glossary of Terms V1.0 (Obsoleted by CD1102)
        (CD 0610)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0610%20Calendaring%20and%20Scheduling%20Glossary%20of%20Terms%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0610-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0610:2006
      type: CC
    date:
      type: published
      value: '2006-10-24'
    revdate: '2006-10-24'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/S0906-2009
    title:
    - type: title-main
      content: Use Cases for Resources V1.0 (CD 0906)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Use Cases for Resources V1.0 (CD 0906)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0906%20Use%20Cases%20for%20Resources%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-s-0906-2009.rxl
    type: specification
    docid:
      id: CC/S 0906:2009
      type: CC
    date:
      type: published
      value: '2009-06-10'
    revdate: '2009-06-10'
    abstract:
      content: This document was created by the USECASE Technical Committee of the
        Calendaring and Scheduling Consortium. The document lists use cases that utilize
        resources within the calendaring and scheduling application domain. We realize
        that some of the use cases presented may include workflow or ideas beyond
        what is offered by current calendaring and scheduling applications.
      format: text/plain
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/A1704-2017
    title:
      content: Report on Test Event and Developers Forum XXXIX, June 12-14, 2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-ioptestevent-39.xml
    - type: pdf
      content: csd/csd-report-ioptestevent-39.pdf
    - type: doc
      content: csd/csd-report-ioptestevent-39.doc
    - type: html
      content: csd/csd-report-ioptestevent-39.html
    - type: rxl
      content: relaton/xml/cc-a-1704-2017.rxl
    type: administrative
    docid:
      id: CC/A 1704:2017
      type: CC
    docnumber: '1704'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-07-21T00:00:00Z'
    revdate: '2017-07-21T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: IOPTEST
  - id: CC/A1705-2017
    title:
      content: Report on CalConnect Conference XL, September 27-29, 2017
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/csd-report-conference-40.xml
    - type: pdf
      content: csd/csd-report-conference-40.pdf
    - type: doc
      content: csd/csd-report-conference-40.doc
    - type: html
      content: csd/csd-report-conference-40.html
    - type: rxl
      content: relaton/xml/cc-a-1705-2017.rxl
    type: administrative
    docid:
      id: CC/A 1705:2017
      type: CC
    docnumber: '1705'
    date:
      type: published
      value: '2017-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2017-10-23T00:00:00Z'
    revdate: '2017-10-23T00:00:00Z'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2017'
    editorialgroup:
      technical_committee:
        name: CHAIRS
  - id: CC/CD51006-2018
    title:
      content: Calendaring and scheduling — Consensus scheduling — iCalendar VPOLL
        component
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-51006.xml
    - type: pdf
      content: csd/cc-51006.pdf
    - type: doc
      content: csd/cc-51006.doc
    - type: html
      content: csd/cc-51006.html
    - type: rxl
      content: relaton/xml/cc-cd-51006-2018.rxl
    type: standard
    docid:
      id: CC/CD 51006:2018
      type: CC
    docnumber: '51006'
    date:
      type: published
      value: '2018-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - person:
        name:
          completename: Eric York
      role: author
    - person:
        name:
          completename: Cyrus Daboo
      role: author
    - person:
        name:
          completename: Michael Douglass
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2018-11-19'
    revdate: '2018-11-19'
    language: en
    script: Latn
    docstatus:
      stage: committee-draft
    copyright:
      owner:
        name: CalConnect
      from: '2018'
    editorialgroup:
      technical_committee:
        name: FREEBUSY
  - id: CC/Adm0503-2005
    title:
    - type: title-main
      content: June 2005 CalConnect Interoperability Test Scenarios V1.0 (CD 0503)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: June 2005 CalConnect Interoperability Test Scenarios V1.0 (CD 0503)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0503%20June%202005%20CalConnect%20Interoperability%20Test%20Scenarios%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0503-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0503:2005
      type: CC
    date:
      type: published
      value: '2005-06-18'
    revdate: '2005-06-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0502-2005
    title:
    - type: title-main
      content: January 2005 CalConnect Interoperability Test Report V1.0 (CD 0502)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: January 2005 CalConnect Interoperability Test Report V1.0 (CD 0502)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0502%20January%202005%20CalConnect%20Interoperability%20Test%20Report%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0502-2005.rxl
    type: administrative
    docid:
      id: CC/Adm 0502:2005
      type: CC
    date:
      type: published
      value: '2005-01-12'
    revdate: '2005-01-12'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/DIR10006-2019
    title:
      content: 'CalConnect Directive: Intellectual property rights policy'
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10006.xml
    - type: pdf
      content: csd/cc-10006.pdf
    - type: doc
      content: csd/cc-10006.doc
    - type: html
      content: csd/cc-10006.html
    - type: rxl
      content: relaton/xml/cc-dir-10006-2019.rxl
    type: directive
    docid:
      id: CC/DIR 10006:2019
      type: CC
    docnumber: '10006'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-03-18'
    revdate: '2019-03-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/R0708-2007
    title:
    - type: title-main
      content: Extended Daylight Savings Time Review and Considerations (CD 0708)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Extended Daylight Savings Time Review and Considerations (CD 0708)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/dstreview.pdf
    - type: rxl
      content: relaton/xml/cc-r-0708-2007.rxl
    type: report
    docid:
      id: CC/R 0708:2007
      type: CC
    date:
      type: published
      value: '2007-02-15'
    revdate: '2007-02-15'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0807-2008
    title:
    - type: title-main
      content: October 2008 CalConnect Interoperability Test Report V1.1 (CD 0807)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: October 2008 CalConnect Interoperability Test Report V1.1 (CD 0807)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0807%20October%202008%20CalConnect%20Interoperability%20Test%20Report%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0807-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0807:2008
      type: CC
    date:
      type: published
      value: '2008-10-08'
    revdate: '2008-10-08'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0806-2008
    title:
    - type: title-main
      content: CalConnect Technical Preview Roundtable XIII V1.0 (CD 0806)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: CalConnect Technical Preview Roundtable XIII V1.0 (CD 0806)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0806%20CalConnect%20Technical%20Preview%20Roundtable%20XIII%20V1.0.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0806-2008.rxl
    type: administrative
    docid:
      id: CC/Adm 0806:2008
      type: CC
    date:
      type: published
      value: '2008-10-08'
    revdate: '2008-10-08'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1501-2015
    title:
    - type: title-main
      content: Report on CalConnect Conference XXXII (CD 1501)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on CalConnect Conference XXXII (CD 1501)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/conference32rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1501-2015.rxl
    type: administrative
    docid:
      id: CC/Adm 1501:2015
      type: CC
    date:
      type: published
      value: '2015-02-18'
    revdate: '2015-02-18'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1001-2010
    title:
    - type: title-main
      content: Report on Roundtable XVII (CD 1001)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XVII (CD 1001)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable17rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1001-2010.rxl
    type: administrative
    docid:
      id: CC/Adm 1001:2010
      type: CC
    date:
      type: published
      value: '2010-02-10'
    revdate: '2010-02-10'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/R10100-2019
    title:
      content: Alignment to international principles — WTO TBT principles for the
        Development of International Standards, Guides and Recommendations
      language: en
      format: text/plain
    link:
    - type: xml
      content: csd/cc-10100.xml
    - type: pdf
      content: csd/cc-10100.pdf
    - type: doc
      content: csd/cc-10100.doc
    - type: html
      content: csd/cc-10100.html
    - type: rxl
      content: relaton/xml/cc-r-10100-2019.rxl
    type: report
    docid:
      id: CC/R 10100:2019
      type: CC
    docnumber: '10100'
    date:
      type: published
      value: '2019-01-01'
    contributor:
    - organization:
        name: CalConnect
      role: author
    - organization:
        name: CalConnect
      role: publisher
    edition: '1'
    version:
      revision_date: '2019-03-18'
    revdate: '2019-03-18'
    language: en
    script: Latn
    docstatus:
      stage: published
    copyright:
      owner:
        name: CalConnect
      from: '2019'
    editorialgroup:
      technical_committee:
        name: PUBLISH
  - id: CC/Adm1402-2014
    title:
    - type: title-main
      content: Report on Interoperability Test Event XXIX (CD 1402)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Interoperability Test Event XXIX (CD 1402)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/ioptestevent29rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1402-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1402:2014
      type: CC
    date:
      type: published
      value: '2014-02-28'
    revdate: '2014-02-28'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1403-2014
    title:
    - type: title-main
      content: Workshop on the Veterans Administration Scheduling System Challenge
        (CD 1403)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Workshop on the Veterans Administration Scheduling System Challenge
        (CD 1403)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/vachallengeworkshopreport.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1403-2014.rxl
    type: administrative
    docid:
      id: CC/Adm 1403:2014
      type: CC
    date:
      type: published
      value: '2014-05-20'
    revdate: '2014-05-20'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm0607-2006
    title:
    - type: title-main
      content: May 2006 CalConnect Interoperability Test Report V1.1 (CD 0607)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: May 2006 CalConnect Interoperability Test Report V1.1 (CD 0607)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/CD0607%20May%202006%20CalConnect%20Interoperability%20Test%20Report%20V1.1.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0607-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0607:2006
      type: CC
    date:
      type: published
      value: '2006-06-12'
    revdate: '2006-06-12'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adm1103-2011
    title:
    - type: title-main
      content: Report on Roundtable XX (CD 1103)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable XX (CD 1103)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable20rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-1103-2011.rxl
    type: administrative
    docid:
      id: CC/Adm 1103:2011
      type: CC
    date:
      type: published
      value: '2011-03-16'
    revdate: '2011-03-16'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70027-2010
    title:
    - type: title-main
      content: LINK Property Extension to iCalendar (Obsolete)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: LINK Property Extension to iCalendar (Obsolete)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-douglass-link-extension/
    - type: rxl
      content: relaton/xml/cc-ietf-70027-2010.rxl
    type: standard
    docid:
      id: CC/IETF 70027:2010
      type: CC
    date:
      type: published
      value: '2010-06-30'
    revdate: '2010-06-30'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/Adv0709-2007
    title:
    - type: title-main
      content: Extended Daylight Savings Time Links, Advisories and Changes (CD 0709)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Extended Daylight Savings Time Links, Advisories and Changes (CD 0709)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/dstlinks.pdf
    - type: rxl
      content: relaton/xml/cc-adv-0709-2007.rxl
    type: advisory
    docid:
      id: CC/Adv 0709:2007
      type: CC
    date:
      type: published
      value: '2007-10-06'
    revdate: '2007-10-06'
    docstatus:
      stage: published
    fetched: '2019-09-25'
  - id: CC/IETF70013-2013
    title:
    - type: title-main
      content: Schedulable Objectclass for vCard
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Schedulable Objectclass for vCard
      language: en
      script: Latn
      format: text/plain
    link:
    - type: html
      content: https://datatracker.ietf.org/doc/draft-vcard-schedulable/
    - type: rxl
      content: relaton/xml/cc-ietf-70013-2013.rxl
    type: standard
    docid:
      id: CC/IETF 70013:2013
      type: CC
    date:
      type: published
      value: '2013-01-25'
    revdate: '2013-01-25'
    docstatus:
      stage: draft-standard
    fetched: '2019-09-25'
  - id: CC/Adm0615-2006
    title:
    - type: title-main
      content: Report on Roundtable VII (CD 0615)
      language: en
      script: Latn
      format: text/plain
    - type: main
      content: Report on Roundtable VII (CD 0615)
      language: en
      script: Latn
      format: text/plain
    link:
    - type: pdf
      content: pubdocs/roundtable7rpt.pdf
    - type: rxl
      content: relaton/xml/cc-adm-0615-2006.rxl
    type: administrative
    docid:
      id: CC/Adm 0615:2006
      type: CC
    date:
      type: published
      value: '2006-09-29'
    revdate: '2006-09-29'
    docstatus:
      stage: published
    fetched: '2019-09-25'

    http_version: 
  recorded_at: Wed, 30 Oct 2019 12:07:27 GMT
recorded_with: VCR 5.0.0
